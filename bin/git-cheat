#!/usr/bin/env node
const colors = require('colors');

const commands = [
  {cmd: "git init", description: "initialize or reinitialize a repository"},
  {cmd: "git clone https://github.com/Fakerr/git-cheat", description: "clone a repository"},
  {cmd: "git add hello.py", description: "add hello.py file to staging area"},
  {cmd: "git add -A", description: "add new files, update modified files and remove deleted files from staging area"},
  {cmd: "git add -u", description: "update modified files and remove deleted files from staging area"},
  {cmd: "git status", description: "current status of the working tree"},
  {cmd: "git diff", description: "show all the unstaged changes"},
  {cmd: "git diff index.html", description: "show all the unstaged changes in index.html file"},
  {cmd: "git commit -m " + "\"commit message here\"".green, description: "commit staged changes"},
  {cmd: "git commit -a -m " + "\"commit message here\"".green , description: "stage and commit changes but ignores newly created files"},
  {cmd: "git reset", description: "unstage all the files"},
  {cmd: "git reset file.html", description: "unstage only file.html"},
  {cmd: "git reset --hard HEAD~1", description: "discard last commit and checkout the commit done before"},
  {cmd: "git reset --hard HEAD~3", description: "discard last 3 commits and revert back to the 4th last commit"},
  {cmd: "git rm index.html", description: "delete index.html from staging area and working directory"},
  {cmd: "git mv index.html file.html", description: "rename index.html to file.html"},
  {cmd: "git mv index.html ./src", description: "move index.html to ./src/index.html"},
  {cmd: "git branch <new-branch>", description: "create a new branch with all the contents of working directory"},
  {cmd: "git branch <new-branch> f71ac24d", description: "create a new branch based on a commit"},
  {cmd: "git branch <new-branch> v1.2", description: "create a new branch from a tag"},
  {cmd: "git branch --track <new-branch> origin/<base-branch>", description: "create a new branch from remote branch"},
  {cmd: "git branch -d <branch-name", description: "delete a branch"},
  {cmd: "git switch <branch-name>", description: "switch to specified branch"},
  {cmd: "git checkout", description: "updates the working directory with the files in the index"},
  {cmd: "git checkout master ", description: "alternate way to switch between branches"},
  {cmd: "git log", description: "shows all the commits you made along with author name and time of commit"},
  {cmd: "git remote add origin <repo-url>", description: "add a remote named origin to a remote repository"},
  {cmd: "git remote set-url origin <repo-url>", description: "changes an existing remote repository URL"},
  {cmd: "git remote -v", description: "verify the remotes"},
  {cmd: "git push origin master", description: "pushes to a remote master branch, where origin is name of the remote you added"},
  {cmd: "git fetch origin master", description: "fetch from a remote repository"},
  {cmd: "git merge <branch-name>", description: "merge a branch with current directory"},
  {cmd: "git pull origin master", description: "fetch and merge from remote repository"},
  {cmd: "git stash", description: "save all the local changes"},
  {cmd: "git stash pop", description: "apply and drop all the saved changes"},
  {cmd: "git stash apply", description: "only apply all the previously saved changes"},
  {cmd: "git tag <tag_name> <commit_id>", description: "add a tag to a commit"},
  {cmd: "git tag", description: "display all the tags"},
  {cmd: "git checkout <tag>", description: "checkout a specific tag"},
];

commands.forEach(function(e) { console.log(e.cmd.cyan + "     " + "#" + e.description.grey.italic); });
